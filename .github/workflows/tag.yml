name: ios-mcn-ran-build

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*.rc*' # Catch tags like v0.0.1 and v0.0.1.rc1
  
  workflow_dispatch:
    inputs:
      ran_type:
        description: 'RAN Type (dist or uni)'
        required: true
        type: choice
        options:
          - dist
          - uni
      tag_name:
        description: 'Git Tag (e.g., v0.0.1 or v0.0.1.rc1)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  DOCKER_REPOSITORY: ${{ github.repository_owner }}

jobs:

  authcheck:
    name: authcheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCR_PAT }}

  set-version-info:
    needs: authcheck
    name: Set Version Info
    runs-on: ubuntu-latest
    outputs:
      DOCKER_IMAGE_TAG: ${{ steps.setvars.outputs.DOCKER_IMAGE_TAG }}
      RAN_TYPE_SUFFIX: ${{ steps.setvars.outputs.RAN_TYPE_SUFFIX }}
    steps:
      - name: Set Version Info
        id: setvars
        run: |
          # Determine tag and RAN type based on trigger source
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # If triggered by a tag push, the tag is GITHUB_REF_NAME
            TAG_FROM_EVENT="${GITHUB_REF_NAME}"
            # For tag pushes, we'll assume 'dist' as default or need another mechanism
            # For simplicity, if pushing a tag, we'll default to 'dist' or fail if not specified
            # A more robust solution might require a separate file/logic in the repo
            echo "::error::When pushing a tag, the RAN type (dist/uni) cannot be determined from the tag name alone."
            echo "::error::Please use 'workflow_dispatch' to specify 'ran_type' for tag builds."
            exit 1
          else # workflow_dispatch
            TAG_FROM_EVENT="${{ github.event.inputs.tag_name }}"
            RAN_TYPE_INPUT="${{ github.event.inputs.ran_type }}"
          fi

          # The DOCKER_IMAGE_TAG is directly the Git tag (e.g., v0.0.1.rc1)
          DOCKER_IMAGE_TAG="$TAG_FROM_EVENT"
          
          # The RAN_TYPE_SUFFIX comes from the workflow_dispatch input
          RAN_TYPE_SUFFIX="-$RAN_TYPE_INPUT" # e.g., -dist or -uni

          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "RAN_TYPE_SUFFIX=$RAN_TYPE_SUFFIX" >> $GITHUB_OUTPUT
          echo "Discovered DOCKER_IMAGE_TAG: $DOCKER_IMAGE_TAG"
          echo "Discovered RAN_TYPE_SUFFIX: $RAN_TYPE_SUFFIX"

  # All other jobs (m4-base, m4-build, m4-gnb, m4-cuup, m4-nr-ue) remain the same
  # as in the previous example, as they consume the outputs from set-version-info.

  m4-base:
    needs: set-version-info
    name: m4-base
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & Push Base Image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/m4-base${{ needs.set-version-info.outputs.RAN_TYPE_SUFFIX }}:${{ needs.set-version-info.outputs.DOCKER_IMAGE_TAG }}"
          echo "Building and pushing $IMAGE"
          docker build -t "$IMAGE" -f docker/Dockerfile.base.ubuntu23.m4cn .
          docker push "$IMAGE"

  m4-build:
    needs: set-version-info
    name: m4-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & Push Build Image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/m4-build${{ needs.set-version-info.outputs.RAN_TYPE_SUFFIX }}:${{ needs.set-version-info.outputs.DOCKER_IMAGE_TAG }}"
          echo "Building and pushing $IMAGE"
          docker build -t "$IMAGE" -f docker/Dockerfile.base.ubuntu23.m4cn .
          docker push "$IMAGE"

  m4-gnb:
    needs: set-version-info
    name: m4-gnb
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & Push gNB Image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/m4-gnb${{ needs.set-version-info.outputs.RAN_TYPE_SUFFIX }}:${{ needs.set-version-info.outputs.DOCKER_IMAGE_TAG }}"
          echo "Building and pushing $IMAGE"
          docker build -t "$IMAGE" -f docker/Dockerfile.base.ubuntu23.m4cn .
          docker push "$IMAGE"

  m4-cuup:
    needs: set-version-info
    name: m4-cuup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & Push CU-UP Image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/m4-cuup${{ needs.set-version-info.outputs.RAN_TYPE_SUFFIX }}:${{ needs.set-version-info.outputs.DOCKER_IMAGE_TAG }}"
          echo "Building and pushing $IMAGE"
          docker build -t "$IMAGE" -f docker/Dockerfile.base.ubuntu23.m4cn .
          docker push "$IMAGE"

  m4-nr-ue:
    needs: set-version-info
    name: m4-nr-ue
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & Push NR-UE Image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/m4-nr-ue${{ needs.set-version-info.outputs.RAN_TYPE_SUFFIX }}:${{ needs.set-version-info.outputs.DOCKER_IMAGE_TAG }}"
          echo "Building and pushing $IMAGE"
          docker build -t "$IMAGE" -f docker/Dockerfile.base.ubuntu23.m4cn .
          docker push "$IMAGE"
