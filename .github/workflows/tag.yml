name: ios-mcn-ran-build

on:
  push:
    tags:
      # Listen for the hidden tags (e.g., v0.0.1.rc1-dist, v0.0.1.rc1-uni)
      - 'v*.*.*-dist'
      - 'v*.*.*-uni'
      - 'v*.*.*.rc*-dist'
      - 'v*.*.*.rc*-uni'

env:
  REGISTRY: ghcr.io
  DOCKER_REPOSITORY: ${{ github.repository_owner }}

jobs:

  authcheck:
    name: authcheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCR_PAT }}

  set-version-info:
    needs: authcheck
    name: Set Version Info
    runs-on: ubuntu-latest
    outputs:
      DOCKER_IMAGE_TAG: ${{ steps.setvars.outputs.DOCKER_IMAGE_TAG }}
      RAN_TYPE_SUFFIX: ${{ steps.setvars.outputs.RAN_TYPE_SUFFIX }}
    steps:
      - name: Set Version Info
        id: setvars
        run: |
          # GITHUB_REF_NAME for a tag push is the tag name itself (e.g., v0.0.1.rc1-dist)
          FULL_TAG_NAME="${GITHUB_REF_NAME}"
          echo "Full tag name from event: $FULL_TAG_NAME"

          # Extract DOCKER_IMAGE_TAG (e.g., v0.0.1.rc1)
          # Remove -dist or -uni suffix
          DOCKER_IMAGE_TAG="${FULL_TAG_NAME%-dist}"
          DOCKER_IMAGE_TAG="${DOCKER_IMAGE_TAG%-uni}"
          echo "Extracted DOCKER_IMAGE_TAG: $DOCKER_IMAGE_TAG"

          # Determine RAN_TYPE_SUFFIX (e.g., -dist or -uni)
          if [[ "$FULL_TAG_NAME" == *-dist ]]; then
            RAN_TYPE_SUFFIX="-dist"
          elif [[ "$FULL_TAG_NAME" == *-uni ]]; then
            RAN_TYPE_SUFFIX="-uni"
          else
            echo "::error::Tag '$FULL_TAG_NAME' does not contain -dist or -uni suffix. Exiting."
            exit 1 # Fail the workflow if the tag doesn't match expected pattern
          fi
          echo "Determined RAN_TYPE_SUFFIX: $RAN_TYPE_SUFFIX"

          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "RAN_TYPE_SUFFIX=$RAN_TYPE_SUFFIX" >> $GITHUB_OUTPUT

  m4-base:
    needs: set-version-info
    name: m4-base
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & Push Base Image
        run: |
          # Construct the image name using the extracted DOCKER_IMAGE_TAG and RAN_TYPE_SUFFIX
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/m4-base${{ needs.set-version-info.outputs.RAN_TYPE_SUFFIX }}:${{ needs.set-version-info.outputs.DOCKER_IMAGE_TAG }}"
          echo "Building and pushing $IMAGE"
          docker build -t "$IMAGE" -f docker/Dockerfile.base.ubuntu23.m4cn .
          docker push "$IMAGE"

  # Repeat the same pattern for m4-build, m4-gnb, m4-cuup, m4-nr-ue
  # Ensure each of these jobs uses:
  #   needs: set-version-info
  #   And constructs the IMAGE variable like:
  #   IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/m4-yourcomponent${{ needs.set-version-info.outputs.RAN_TYPE_SUFFIX }}:${{ needs.set-version-info.outputs.DOCKER_IMAGE_TAG }}"

  m4-build:
    needs: set-version-info
    name: m4-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Build & Push Build Image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/m4-build${{ needs.set-version-info.outputs.RAN_TYPE_SUFFIX }}:${{ needs.set-version-info.outputs.DOCKER_IMAGE_TAG }}"
          echo "Building and pushing $IMAGE"
          docker build -t "$IMAGE" -f docker/Dockerfile.base.ubuntu23.m4cn .
          docker push "$IMAGE"

  m4-gnb:
    needs: set-version-info
    name: m4-gnb
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Build & Push gNB Image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/m4-gnb${{ needs.set-version-info.outputs.RAN_TYPE_SUFFIX }}:${{ needs.set-version-info.outputs.DOCKER_IMAGE_TAG }}"
          echo "Building and pushing $IMAGE"
          docker build -t "$IMAGE" -f docker/Dockerfile.base.ubuntu23.m4cn .
          docker push "$IMAGE"

  m4-cuup:
    needs: set-version-info
    name: m4-cuup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Build & Push CU-UP Image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/m4-cuup${{ needs.set-version-info.outputs.RAN_TYPE_SUFFIX }}:${{ needs.set-version-info.outputs.DOCKER_IMAGE_TAG }}"
          echo "Building and pushing $IMAGE"
          docker build -t "$IMAGE" -f docker/Dockerfile.base.ubuntu23.m4cn .
          docker push "$IMAGE"

  m4-nr-ue:
    needs: set-version-info
    name: m4-nr-ue
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Build & Push NR-UE Image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/m4-nr-ue${{ needs.set-version-info.outputs.RAN_TYPE_SUFFIX }}:${{ needs.set-version-info.outputs.DOCKER_IMAGE_TAG }}"
          echo "Building and pushing $IMAGE"
          docker build -t "$IMAGE" -f docker/Dockerfile.base.ubuntu23.m4cn .
          docker push "$IMAGE"
